package GUI;


import Music.AudioPlay;
import Music.HelperMethods;
import Music.Instruments.AMInst;
import Music.Instruments.AddSynthInst;
import Music.Instruments.BreathyFluteInst;
import Music.Instruments.ChiffInst;
import Music.Instruments.FMNoiseInst;
import Music.Instruments.GranularInst;
import Music.Instruments.HarmonicsInst;
import Music.Instruments.NoiseInst;
import Music.KeySignature;
import Music.Instruments.RingModulationInst;
import Music.Instruments.SimpleReverbInst;
import Music.Instruments.SimpleTremoloInst;
import Music.Instruments.SubtractiveSynthInst;
import Music.Instruments.VibratoInst;
import Music.Instruments.WaveInst;
import Music.ScoreMusic;
import Steg.StegInfo;
import Steg.Steganography;
import TripleDES.Base64Coder;
import TripleDES.TripleDES;
import java.io.File;
import java.security.InvalidKeyException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import jm.util.*;
import jm.music.data.*;
import jm.audio.Instrument;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GUI.java
 *
 * Created on 23-Jul-2010, 14:06:52
 */

/**
 *
 * @author Jenn
 */
public class GUI extends javax.swing.JFrame {

    //GUI Parameters
    //synthesis
    private boolean addSynth = false;
    private boolean granSynth = false;
    private boolean subSynth = false;
    
    //effects
    private boolean vibrato = false;
    private boolean reverb = false;
    private boolean tremolo = false;

    private boolean ringMod = false;
    private boolean ampMod = false;
    private boolean freqMod = false;

    private String keySig = "None";
    private String[] keySigs = {"None", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B", "Cm", "C#m", "Dm", "D#m", "Em", "Fm", "F#m", "Gm", "G#m", "Am", "A#m", "B"};
    private int waveform=0;//default sine wave

    //Security Parameters
    private String password;
    private String message;
    private String ciphertext;

    //Music Parameters
    int channels = 2;
    int sampleRate=44100;
    byte[] audioData;
    public static Score score = new Score();
    Instrument[] ensemble;
    private int MAX_INSTRS = 12;
    Instrument[] tempEnsemble = new Instrument[MAX_INSTRS];
    private int instrCount=0;

    //instruments
    int filterCutoff = 500;
    AddSynthInst addSynthInst = new AddSynthInst(sampleRate);
    Instrument ringInst = new RingModulationInst(sampleRate);
    Instrument vibratoInst = new VibratoInst(sampleRate);
    Instrument amInst = new AMInst(sampleRate);
    int modIndex = 1;//range: 1-10;
    Instrument fmInst = new FMNoiseInst(sampleRate, modIndex, channels);
    Instrument subSynthInst = new SubtractiveSynthInst(sampleRate);
    Instrument noiseInst = new NoiseInst(sampleRate);
    Instrument chiffInst = new ChiffInst(sampleRate);
    Instrument breathyFluteInst = new BreathyFluteInst(sampleRate);
    Instrument waveInst = new WaveInst(sampleRate);
    Instrument harmonicsInst = new HarmonicsInst(sampleRate);
    String temp = "temp.au";
    Instrument reverbInst = new SimpleReverbInst(temp);
    Instrument tremoloInst = new SimpleTremoloInst(sampleRate);

    String outputFilename;
    HelperMethods helper = new HelperMethods();
    Thread basicMusic = new Thread();
    Thread play = new Thread();
    AudioPlay audioPlay;

    /** Creates new form GUI */
    public GUI() {
        getContentPane().setPreferredSize(new java.awt.Dimension(642, 451));
        initComponents();
        
        

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        loadingLbl = new javax.swing.JLabel();
        decodeBtn = new javax.swing.JButton();
        passwordTF = new javax.swing.JPasswordField();
        passwordLbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageTA = new javax.swing.JTextArea();
        msgLbl = new javax.swing.JLabel();
        addSynthChB = new javax.swing.JCheckBox();
        granSynthChB = new javax.swing.JCheckBox();
        subSynthChB = new javax.swing.JCheckBox();
        synthLbl = new javax.swing.JLabel();
        tremoloChB = new javax.swing.JCheckBox();
        fxLbl = new javax.swing.JLabel();
        reverbChB = new javax.swing.JCheckBox();
        vibratoChB = new javax.swing.JCheckBox();
        keyCB = new javax.swing.JComboBox();
        keyLbl = new javax.swing.JLabel();
        composeBtn = new javax.swing.JButton();
        passwordErrorLbl = new javax.swing.JLabel();
        ringModChB = new javax.swing.JCheckBox();
        ampModChB = new javax.swing.JCheckBox();
        modLbl = new javax.swing.JLabel();
        freqModChB = new javax.swing.JCheckBox();
        statusLbl = new javax.swing.JLabel();
        waveformLbl = new javax.swing.JLabel();
        waveformCB = new javax.swing.JComboBox();
        playBtn = new javax.swing.JButton();
        stopBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        bgLbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Secure Composer");
        getContentPane().setLayout(null);
        getContentPane().add(loadingLbl);
        loadingLbl.setBounds(210, 80, 190, 220);

        decodeBtn.setText("Decode");
        decodeBtn.setToolTipText("decode existing file");
        decodeBtn.setMinimumSize(new java.awt.Dimension(73, 23));
        decodeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decodeBtnActionPerformed(evt);
            }
        });
        getContentPane().add(decodeBtn);
        decodeBtn.setBounds(170, 340, 90, 29);

        passwordTF.setText("000000000000000000000000");
        passwordTF.setToolTipText("Enter 24 Character Password");
        passwordTF.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        getContentPane().add(passwordTF);
        passwordTF.setBounds(70, 100, 206, 28);

        passwordLbl.setText("Password");
        getContentPane().add(passwordLbl);
        passwordLbl.setBounds(10, 103, 60, 16);

        messageTA.setColumns(20);
        messageTA.setLineWrap(true);
        messageTA.setRows(5);
        messageTA.setToolTipText("Enter Message to Encrypt / DIsplays Decrypted Message");
        jScrollPane1.setViewportView(messageTA);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(70, 150, 301, 188);

        msgLbl.setText("Message");
        getContentPane().add(msgLbl);
        msgLbl.setBounds(10, 152, 60, 16);

        addSynthChB.setBackground(new java.awt.Color(255, 255, 255));
        addSynthChB.setText("Additive Synthesis");
        addSynthChB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSynthChBActionPerformed(evt);
            }
        });
        getContentPane().add(addSynthChB);
        addSynthChB.setBounds(400, 80, 160, 23);

        granSynthChB.setBackground(new java.awt.Color(255, 255, 255));
        granSynthChB.setText("Granular Synthesis");
        granSynthChB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                granSynthChBActionPerformed(evt);
            }
        });
        getContentPane().add(granSynthChB);
        granSynthChB.setBounds(400, 100, 160, 23);

        subSynthChB.setBackground(new java.awt.Color(255, 255, 255));
        subSynthChB.setText("Subtractive Synthesis");
        subSynthChB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subSynthChBActionPerformed(evt);
            }
        });
        getContentPane().add(subSynthChB);
        subSynthChB.setBounds(400, 120, 170, 23);

        synthLbl.setText("Synthesis Methods");
        getContentPane().add(synthLbl);
        synthLbl.setBounds(400, 60, 140, 16);

        tremoloChB.setBackground(new java.awt.Color(255, 255, 255));
        tremoloChB.setText("Tremolo");
        tremoloChB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tremoloChBActionPerformed(evt);
            }
        });
        getContentPane().add(tremoloChB);
        tremoloChB.setBounds(400, 220, 100, 23);

        fxLbl.setText("Effects");
        getContentPane().add(fxLbl);
        fxLbl.setBounds(400, 160, 70, 16);

        reverbChB.setBackground(new java.awt.Color(255, 255, 255));
        reverbChB.setText("Reverb");
        reverbChB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reverbChBActionPerformed(evt);
            }
        });
        getContentPane().add(reverbChB);
        reverbChB.setBounds(400, 200, 90, 23);

        vibratoChB.setBackground(new java.awt.Color(255, 255, 255));
        vibratoChB.setText("Vibrato");
        vibratoChB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vibratoChBActionPerformed(evt);
            }
        });
        getContentPane().add(vibratoChB);
        vibratoChB.setBounds(400, 180, 90, 23);

        keyCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B", "Cm", "C#m", "Dm", "D#m", "Em", "Fm", "F#m", "Gm", "G#m", "Am", "A#m", "B" }));
        keyCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyCBActionPerformed(evt);
            }
        });
        getContentPane().add(keyCB);
        keyCB.setBounds(470, 270, 100, 27);

        keyLbl.setText("Key");
        getContentPane().add(keyLbl);
        keyLbl.setBounds(400, 270, 30, 16);

        composeBtn.setText("Compose");
        composeBtn.setToolTipText("Compose Music");
        composeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                composeBtnActionPerformed(evt);
            }
        });
        getContentPane().add(composeBtn);
        composeBtn.setBounds(70, 340, 90, 29);

        passwordErrorLbl.setForeground(new java.awt.Color(255, 0, 0));
        getContentPane().add(passwordErrorLbl);
        passwordErrorLbl.setBounds(66, 126, 301, 20);

        ringModChB.setBackground(new java.awt.Color(255, 255, 255));
        ringModChB.setText("RM");
        ringModChB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ringModChBActionPerformed(evt);
            }
        });
        getContentPane().add(ringModChB);
        ringModChB.setBounds(480, 180, 60, 23);

        ampModChB.setBackground(new java.awt.Color(255, 255, 255));
        ampModChB.setText("AM");
        ampModChB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ampModChBActionPerformed(evt);
            }
        });
        getContentPane().add(ampModChB);
        ampModChB.setBounds(480, 200, 60, 23);

        modLbl.setText("Modulation");
        getContentPane().add(modLbl);
        modLbl.setBounds(480, 160, 80, 16);

        freqModChB.setBackground(new java.awt.Color(255, 255, 255));
        freqModChB.setText("FM");
        freqModChB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                freqModChBActionPerformed(evt);
            }
        });
        getContentPane().add(freqModChB);
        freqModChB.setBounds(480, 220, 60, 23);

        statusLbl.setForeground(java.awt.Color.green);
        getContentPane().add(statusLbl);
        statusLbl.setBounds(270, 360, 100, 20);

        waveformLbl.setText("Waveform");
        getContentPane().add(waveformLbl);
        waveformLbl.setBounds(400, 300, 70, 16);

        waveformCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sine", "Square", "Triangle", "Sawtooth", "Pulse", "Cosine" }));
        waveformCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waveformCBActionPerformed(evt);
            }
        });
        getContentPane().add(waveformCB);
        waveformCB.setBounds(470, 300, 100, 27);

        playBtn.setBackground(new java.awt.Color(255, 255, 255));
        playBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/playBtn_small2.PNG"))); // NOI18N
        playBtn.setEnabled(false);
        playBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playBtnActionPerformed(evt);
            }
        });
        getContentPane().add(playBtn);
        playBtn.setBounds(390, 340, 30, 30);

        stopBtn.setBackground(new java.awt.Color(255, 255, 255));
        stopBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/stopBtn_small2.PNG"))); // NOI18N
        stopBtn.setEnabled(false);
        stopBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopBtnActionPerformed(evt);
            }
        });
        getContentPane().add(stopBtn);
        stopBtn.setBounds(430, 340, 30, 30);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Options"));
        jPanel1.setName(""); // NOI18N
        getContentPane().add(jPanel1);
        jPanel1.setBounds(390, 30, 180, 220);

        bgLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/bg1.jpg"))); // NOI18N
        getContentPane().add(bgLbl);
        bgLbl.setBounds(0, -30, 640, 480);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addSynthChBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSynthChBActionPerformed
        // TODO add your handling code here:
        if (addSynthChB.isSelected())
            addSynth=true;
        else
            addSynth=false;
    }//GEN-LAST:event_addSynthChBActionPerformed

    private void granSynthChBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_granSynthChBActionPerformed
        // TODO add your handling code here:
        if (granSynthChB.isSelected())
            granSynth=true;
        else
            granSynth=false;
    }//GEN-LAST:event_granSynthChBActionPerformed

    private void subSynthChBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subSynthChBActionPerformed
        // TODO add your handling code here:
        if (subSynthChB.isSelected())
            subSynth=true;
        else
            subSynth=false;
    }//GEN-LAST:event_subSynthChBActionPerformed

    private void reverbChBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reverbChBActionPerformed
        // TODO add your handling code here:
        if (reverbChB.isSelected())
            reverb=true;
        else
            reverb=false;
    }//GEN-LAST:event_reverbChBActionPerformed

    private void vibratoChBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vibratoChBActionPerformed
        // TODO add your handling code here:
        if (vibratoChB.isSelected())
            vibrato=true;
        else
            vibrato=false;
    }//GEN-LAST:event_vibratoChBActionPerformed

    private void keyCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyCBActionPerformed
        // TODO add your handling code here:
        int keyIndex = keyCB.getSelectedIndex();
        keySig = keySigs[keyIndex];
    }//GEN-LAST:event_keyCBActionPerformed

    private void composeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_composeBtnActionPerformed
        // TODO add your handling code here:

        int[] msgs = {0};
        //update status
        statusLbl.setText("");
        loadingLbl.setIcon(new ImageIcon(getClass().getResource("/GUI/fingerprint_scan_blue_small.gif")));
        statusLbl.setText("Working...");

        //reset
        instrCount=0;
        tempEnsemble = new Instrument[MAX_INSTRS];
        boolean continueOK = true;

        //encrypt
        String passwordCheck = passwordTF.getText();
        if (passwordCheck.length()==24)
        {
            continueOK = true;
        }
        else
        {
            //error: password length is incorrect
            passwordErrorLbl.setText("Error: Password must be 24 characters in length");
            continueOK = false;
        }
        if (passwordCheck.equals("000000000000000000000000"))
        {
            //error: password not entered
            passwordErrorLbl.setText("Error: No password entered");
            continueOK = false;
        }
        if ((messageTA.getText().equals("")) || messageTA.getText().equals(null))
        {
            continueOK = false;
            passwordErrorLbl.setText("Error: No message entered");
        }
        if (continueOK)
        {
            passwordErrorLbl.setText("");
            password = passwordCheck;
            message = messageTA.getText();
            messageTA.setText("");//reset text area
        }
        if (continueOK)
        {
            ciphertext = Encrypt(message, password);
            //music
            char[] msgsCh = ciphertext.toCharArray();
            msgs = new int[msgsCh.length];
            for (int i=0; i<msgsCh.length; i++)
            {
                int msg = msgsCh[i];
                if (msg>0)
                    msgs[i] = msgsCh[i];
            }

            //check key
            if (!keySig.equals("None"))
            {
                KeySignature keySignature = new KeySignature(keySig);
                msgs = keySignature.PutInKey(msgs);
            }

            //write score with sine inst
            BasicMusic(msgs);
        }
        if (continueOK)
        {
            //get filename and location from user
            String result = saveFile();
            if (result.equals("ERROR"))
                continueOK=false;
            else
                outputFilename = result;
        }
        if (continueOK)
        {

            //add selected music
            if (addSynth)
            {
                AddSynth(msgs);
                Harmonics(msgs);
            }
            if (ringMod)
            {
                RingMod(msgs);
            }
            if (vibrato)
            {
                Vibrato(msgs);
            }
            if (ampMod)
            {
                AmpMod(msgs);
            }
            if (freqMod)
            {
                FreqMod(msgs);
            }
            if (subSynth)
            {
                SubSynth(msgs);
            }
            if (tremolo)
            {
                Tremolo(msgs);
            }
            //additional sounds
            Noise(msgs);
            Chiff(msgs);
            BreathyFlute(msgs);

            //wait indefinitely for score writing to finish
            try {
                basicMusic.join();
                // Finished
            } catch (InterruptedException e) {
                // Thread was interrupted
            }
            //Write music to au file
            audioData = WriteMusic();

            //steganography
            Steganography steg = new Steganography();
            File output = new File(outputFilename);
            int compression = 1;
            steg.embedMessage(audioData, output, ciphertext, compression);

            //update status
            loadingLbl.setIcon(null);
            statusLbl.setText("Done!");
            playBtn.setEnabled(true);
        }
        else
        {
            statusLbl.setText("");
            playBtn.setEnabled(false);
            loadingLbl.setIcon(null);
            if(basicMusic.isAlive())
                basicMusic.interrupt();
        }

    }//GEN-LAST:event_composeBtnActionPerformed

    private void ringModChBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ringModChBActionPerformed
        // TODO add your handling code here:
        if (ringModChB.isSelected())
            ringMod=true;
        else
            ringMod=false;
    }//GEN-LAST:event_ringModChBActionPerformed

    private void ampModChBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ampModChBActionPerformed
        // TODO add your handling code here:
        if (ampModChB.isSelected())
            ampMod=true;
        else
            ampMod=false;
    }//GEN-LAST:event_ampModChBActionPerformed

    private void freqModChBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freqModChBActionPerformed
        // TODO add your handling code here:
        if (freqModChB.isSelected())
            freqMod=true;
        else
            freqMod=false;
    }//GEN-LAST:event_freqModChBActionPerformed

    private void decodeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decodeBtnActionPerformed
        // TODO add your handling code here:
        //update status
        statusLbl.setText("Working...");
        loadingLbl.setIcon(new ImageIcon(getClass().getResource("/GUI/fingerprint_scan_blue_small.gif")));

        messageTA.setText("");//empty message text area

        boolean continueOK = true;

        //encrypt
        //check password entered
        String passwordCheck = passwordTF.getText();
        if (passwordCheck.length()==24)
        {
            continueOK = true;
        }
        else
        {
            //error: password length is incorrect
            passwordErrorLbl.setText("Error: Password must be 24 characters in length");
            continueOK = false;
        }
        if (passwordCheck.equals("000000000000000000000000"))
        {
            //error: password not entered
            passwordErrorLbl.setText("Error: No password entered");
            continueOK = false;
        }
        if (continueOK)
        {
            passwordErrorLbl.setText("");
            password = passwordCheck;
            String result = openFile();
            if(!result.equals("ERROR"))
            {
                String filename = result;
                File file = new File(filename);
                outputFilename = filename;//this is needed for the play button action
                StegInfo info = new StegInfo(file);
                Steganography steg = new Steganography();
                String encMsg = steg.retrieveMessage(info);

                String plaintext = Decrypt(encMsg, password);

                if (plaintext.equals(""))
                {
                    passwordErrorLbl.setText("Error: Incorrect Password");
                }
                messageTA.setText(plaintext);
            }
            //update status
            statusLbl.setText("");
            loadingLbl.setIcon(null);
            playBtn.setEnabled(true);
        }
        else
        {
            //update status
            playBtn.setEnabled(false);
            statusLbl.setText("");
            loadingLbl.setIcon(null);
        }
       
    }//GEN-LAST:event_decodeBtnActionPerformed

    private void tremoloChBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tremoloChBActionPerformed
        // TODO add your handling code here:
        if (tremoloChB.isSelected())
            tremolo=true;
        else
            tremolo=false;
}//GEN-LAST:event_tremoloChBActionPerformed

    private void waveformCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waveformCBActionPerformed
        // TODO add your handling code here:
        int index = waveformCB.getSelectedIndex();
        if (index==0)
            waveform = 0;//sine
        else if (index==1)
            waveform = 3;//square
        else if (index==2)
            waveform = 2;//triangle
        else if (index==3)
            waveform = 4;//sawtooth
        else if (index==4)
            waveform = 7;//pulse
        else if (index==5)
            waveform = 1;//cosine

    }//GEN-LAST:event_waveformCBActionPerformed

    private void playBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playBtnActionPerformed

        audioPlay = new AudioPlay(outputFilename);
        audioPlay.play();
        if (playBtn.isEnabled())
            playBtn.setEnabled(false);
        

        if(!stopBtn.isEnabled())
            stopBtn.setEnabled(true);
    }//GEN-LAST:event_playBtnActionPerformed

    private void stopBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBtnActionPerformed
        // TODO add your handling code here:
        audioPlay.stop();//stop audio
        
        if (!playBtn.isEnabled())
            playBtn.setEnabled(true);
        if(stopBtn.isEnabled())
            stopBtn.setEnabled(false);

    }//GEN-LAST:event_stopBtnActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    private String Encrypt(String plaintext, String password)
    {
        String encBase = "";
        TripleDES des = new TripleDES();
        byte[] encBytes = new byte[plaintext.length()];
        encBytes = des.encrypt(plaintext, password);//encrypt text
        encBase = Base64Coder.encodeLines(encBytes);//encode encrypted text
        return encBase;
    }
    private static String Decrypt(String encBase, String password)
    {
        String recoveredPText = "";
        TripleDES des = new TripleDES();
        try {
            byte[] encBytes = Base64Coder.decodeLines(encBase);//decode encrypted text
            recoveredPText = des.decrypt(encBytes, password);//decrypt text
        } catch (InvalidKeyException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        return recoveredPText;
    }
    private void BasicMusic(int[] msgs)
    {
        //score = new Score();//start with new score
        //Music SineMusic = new Music();
        //score.addPart(SineMusic.Sine(msgs, score));
//        score = SineMusic.SineWithBass(msgs);
        basicMusic = new Thread(new ScoreMusic(msgs));
        basicMusic.start();


        float frequency = -1.0f;
        int num = (int) (Math.random() * 8);
        double[] points = {0.0, 0.0, 0.15, 1.0, 0.3, 0.5, 1.0, 0.0};
        //DecimalFormat twoDForm = new DecimalFormat("#.##");
        /*double[] points = {
            Double.valueOf(twoDForm.format(helper.scale(0.0, 1.0, 0, 128, msgs[0]))),
            Double.valueOf(twoDForm.format(helper.scale(0.0, 1.0, 0, 128, msgs[1]))),
            Double.valueOf(twoDForm.format(helper.scale(0.0, 1.0, 0, 128, msgs[2]))),
            Double.valueOf(twoDForm.format(helper.scale(0.0, 1.0, 0, 128, msgs[3]))),
            Double.valueOf(twoDForm.format(helper.scale(0.0, 1.0, 0, 128, msgs[4]))),
            Double.valueOf(twoDForm.format(helper.scale(0.0, 1.0, 0, 128, msgs[5]))),
            Double.valueOf(twoDForm.format(helper.scale(0.0, 1.0, 0, 128, msgs[6]))),
            Double.valueOf(twoDForm.format(helper.scale(0.0, 1.0, 0, 128, msgs[7]))),
            Double.valueOf(twoDForm.format(helper.scale(0.0, 1.0, 0, 128, msgs[8]))),
            Double.valueOf(twoDForm.format(helper.scale(0.0, 1.0, 0, 128, msgs[9]))),
            Double.valueOf(twoDForm.format(helper.scale(0.0, 1.0, 0, 128, msgs[10]))),
            Double.valueOf(twoDForm.format(helper.scale(0.0, 1.0, 0, 128, msgs[7])))
        };
         *
         */

        waveInst = new WaveInst(sampleRate, channels, points, frequency, waveform);
        instrCount++;//count instruments so to write them to the ensemble later
        tempEnsemble[0]=waveInst;
    }
    private byte[] WriteMusic()
    {
        ensemble = new Instrument[instrCount+1];
        for (int i=0; i<instrCount; i++)
        {
            ensemble[i] = tempEnsemble[i];
        }

        String tempFilename = "temp.au";
        Write.au(score, tempFilename, ensemble);
        //Granular Synthesis
        if (granSynth)
        {
            Score score2 = new Score("Granular");
            Part part = new Part("wave", 0);
            Phrase phr = new Phrase(0.0);
            GranularInst granInst = new GranularInst(tempFilename,true,
                    true, true);
            //GranularInst inst = new GranularInst("song1.au");
            Note note = new Note(87, 4.0); //about 4k
            phr.addNote(note);
            part.addPhrase(phr);
            score2.addPart(part);
            tempFilename = "temp1.au";
            Write.au(score2, tempFilename, granInst);

        }
        if (reverb)
        {
            //Reverb(tempFilename);
            double baseFreq = 440.0;
            boolean wholeFile = true;
            reverbInst = new SimpleReverbInst(tempFilename, baseFreq, wholeFile);
            Score score3 = new Score("Reverb");
            Part part = new Part("wave", 0);
            Phrase phr = new Phrase(0.0);
            Note note = new Note(87, 4.0); //about 4k
            phr.addNote(note);
            part.addPhrase(phr);
            score3.addPart(part);
            tempFilename = "temp2.au";
            Write.au(score3, tempFilename, reverbInst);
        }
        
        File file = new File(tempFilename);
        return helper.auToByteArray(file);
    }
    private void AddSynth(int[] msgs) {
        double[][] allEnvPoints;
        //double[] envPoints = {scale(0.0, 1.0, msgs[9]), scale(0.0, 1.0, msgs[8]), scale(0.0, 1.0, msgs[7]), scale(0.0, 1.0, msgs[6]), scale(0.0, 1.0, msgs[5]), scale(0.0, 1.0, msgs[4]), scale(0.0, 1.0, msgs[3]), scale(0.0, 1.0, msgs[2]), scale(0.0, 1.0, msgs[1]), scale(0.0, 1.0, msgs[0])};
        double[] envPoints = {0.0, 0.0, 0.05, 1.0, 0.15, 0.4, 0.9, 0.3, 1.0, 0.0};
        double[] overtoneRatios = {helper.scale(0.0, 9.0, 0, 128, msgs[0]), helper.scale(0.0, 9.0, 0, 128, msgs[1]), helper.scale(0.0, 9.0, 0, 128, msgs[2]), helper.scale(0.0, 9.0, 0, 128, msgs[3]), helper.scale(0.0, 9.0, 0, 128, msgs[4])};
        double[] overtoneVolumes = {helper.scale(0.0, 1.0, 0, 128, msgs[0]), helper.scale(0.0, 1.0, 0, 128, msgs[1]), helper.scale(0.0, 1.0, 0, 128, msgs[2]), helper.scale(0.0, 1.0, 0, 128, msgs[3]), helper.scale(0.0, 1.0, 0, 128, msgs[4])};

        double[][] tempPoints = new double[5][];
        for (int i = 0; i < 5; i++) {
            tempPoints[i] = envPoints;//scale(0.0, 1.0, msgs[i]);
        }
        allEnvPoints = tempPoints;

        addSynthInst = new AddSynthInst(sampleRate, overtoneRatios, overtoneVolumes, allEnvPoints);

        //add instrument
        tempEnsemble[instrCount] = addSynthInst;
        instrCount++;
    }
    private void Harmonics(int[] msgs)
    {
        int numOvertones = helper.scale(0, 16, 0, 128, msgs[0]);
        harmonicsInst = new HarmonicsInst(sampleRate, numOvertones);

        //add instrument
        tempEnsemble[instrCount] = harmonicsInst;
        instrCount++;
    }

    private void RingMod(int[] msgs)
    {
        ringInst = new RingModulationInst(sampleRate, channels);

        //add instrument
        tempEnsemble[instrCount] = ringInst;
        instrCount++;
    }
    private void Vibrato(int[] msgs)
    {
        vibratoInst = new VibratoInst(sampleRate, channels);

        //add instrument
        tempEnsemble[instrCount] = vibratoInst;
        instrCount++;
    }
    private void AmpMod(int[] msgs)
    {
        amInst = new AMInst(sampleRate, channels);

        //add instrument
        tempEnsemble[instrCount] = amInst;
        instrCount++;
    }
    private void FreqMod(int[] msgs)
    {
        modIndex = (int) helper.scale(1, 10, 0, 128, msgs[0]);
        fmInst = new FMNoiseInst(sampleRate, modIndex, channels);

        //add instrument
        tempEnsemble[instrCount] = fmInst;
        instrCount++;
    }
    private void SubSynth(int[] msgs)
    {
        filterCutoff = (int) helper.scale(1, 10, 0, 128, msgs[1]);
        int attack = (int) helper.scale(10, 250, 0, 128, msgs[2]);
        int decay = (int) helper.scale(10, 250, 0, 128, msgs[3]);
        double sustain = helper.scale(0.0, 1.0, 0, 128, msgs[4]);
        int release = (int) helper.scale(10, 250, 0, 128, msgs[5]);
        int numbOfOsc = (int) helper.scale(1, 10, 0, 128, msgs[6]);
        boolean subOsc = true;

        subSynthInst = new SubtractiveSynthInst(sampleRate, waveform, filterCutoff,
                            attack, decay, sustain, release, numbOfOsc, subOsc);
        ///add instrument
        tempEnsemble[instrCount] = subSynthInst;
        instrCount++;
    }
    private void Noise(int[] msgs)
    {
        /*
         * Noise Types
         * ---------------
         * WHITE_NOISE = 0
         * STEP_NOISE = 1
         * SMOOTH_NOISE = 2
         * BROWN_NOISE = 3
         * FRACTAL_NOISE = 4
         * GAUSSIAN_NOISE = 5
         * WALK_NOISE = 6
         * GENDYN_NOISE = 7
         */
        int noiseType = (int) helper.scale(0, 7, 0, 128, msgs[0]);
        noiseInst = new NoiseInst(sampleRate, channels, noiseType);

        //add instrument
        tempEnsemble[instrCount] = noiseInst;
        instrCount++;
    }
    private void Chiff(int[] msgs)
    {
        chiffInst = new ChiffInst(sampleRate, channels);

        //add instrument
        tempEnsemble[instrCount] = chiffInst;
        instrCount++;
    }
    private void BreathyFlute(int[] msgs)
    {
        breathyFluteInst = new BreathyFluteInst(sampleRate, channels);

        //add instrument
        tempEnsemble[instrCount] = breathyFluteInst;
        instrCount++;
    }
    private void Tremolo(int[] msgs)
    {
        tremoloInst = new SimpleTremoloInst(sampleRate, channels);

        //add instrument
        tempEnsemble[instrCount] = tremoloInst;
        instrCount++;
    }
    public static void setScore(Score score)
    {
        //method called by ScoreMusic thread
        GUI.score = score;
    }
    private String saveFile()
    {
        JFileChooser fc = new JFileChooser();
        AudioFileExtensionFilter wavFileFilter = new AudioFileExtensionFilter();
        fc.setFileFilter(wavFileFilter);
        int result = fc.showSaveDialog(this);
        if(result == JFileChooser.CANCEL_OPTION) return "ERROR";
        File file = fc.getSelectedFile();
        String filename = file.getPath();
        if (!filename.endsWith(".wav"))
        {
            filename+=".wav";
            file = new File(filename);
        }
        if (file.exists())
        {
            int r = JOptionPane.showConfirmDialog(null, "File already exists. Do you wish to overwrite the file?", "Overwrite", JOptionPane.YES_NO_OPTION);
            if (r == JOptionPane.YES_OPTION)
                return filename;
            else
                return saveFile();//no overwrite so call dialog again
      }
      return filename;
    }
    private String openFile()
    {
        JFileChooser fc = new JFileChooser();
        AudioFileExtensionFilter wavFileFilter = new AudioFileExtensionFilter();
        fc.setFileFilter(wavFileFilter);
        int result = fc.showOpenDialog(this);
        if(result == JFileChooser.CANCEL_OPTION) return "ERROR";
        File file = fc.getSelectedFile();
        String filename = file.getPath();
        if (!filename.endsWith(".wav"))
        {
            filename+=".wav";
            file = new File(filename);
        }
        if (!file.exists())
        {
            int r = JOptionPane.showConfirmDialog(null, "File not found", "Error", JOptionPane.OK_CANCEL_OPTION);
            if (r == JOptionPane.OK_OPTION)
                return openFile();
            else
                return "ERROR";
        }
      return filename;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox addSynthChB;
    private javax.swing.JCheckBox ampModChB;
    private javax.swing.JLabel bgLbl;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton composeBtn;
    private javax.swing.JButton decodeBtn;
    private javax.swing.JCheckBox freqModChB;
    private javax.swing.JLabel fxLbl;
    private javax.swing.JCheckBox granSynthChB;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox keyCB;
    private javax.swing.JLabel keyLbl;
    private javax.swing.JLabel loadingLbl;
    private javax.swing.JTextArea messageTA;
    private javax.swing.JLabel modLbl;
    private javax.swing.JLabel msgLbl;
    private javax.swing.JLabel passwordErrorLbl;
    private javax.swing.JLabel passwordLbl;
    private javax.swing.JPasswordField passwordTF;
    private javax.swing.JButton playBtn;
    private javax.swing.JCheckBox reverbChB;
    private javax.swing.JCheckBox ringModChB;
    private javax.swing.JLabel statusLbl;
    private javax.swing.JButton stopBtn;
    private javax.swing.JCheckBox subSynthChB;
    private javax.swing.JLabel synthLbl;
    private javax.swing.JCheckBox tremoloChB;
    private javax.swing.JCheckBox vibratoChB;
    private javax.swing.JComboBox waveformCB;
    private javax.swing.JLabel waveformLbl;
    // End of variables declaration//GEN-END:variables

}
